#! /bin/sh
(shopt -s igncr) 2>/dev/null && eval 'shopt -s igncr';#

# $Date: 2017/02/07 16:15:53 MST $
#
# This script is used to define a subdirectory name specific
# to the currently-loaded fortran compiler module. If modulecmd is not found
# on the current machine, then the first argument is returned with a
# prepended "/".
#

usage ()
{
   cat <<EOF

 Usage:
   define_module_subdir [-h] [-d val] <PATT> [<LOC>]

   -h      Show this help
   -d val  Define the default return string, val, in case PATT is not found

   <PATT>  Specify the F90 compiler module name pattern {i.e., absoft, pgi,
           pathscale, intel-f, '^intel(-f)?/', ...}.
           Note that Perl regular expressions are valid, but it is strongly
           recommended that the -d option is used in tandem with any regular
           expression.

   <LOC>   Optionally specify the location of prerequisite script(s).

EOF
}

if [ $# -le 0 ]; then
  usage
  exit 1
fi

# Parse options -- ":d:h"
# initial colon
#    * means getopts should not produce an internal error message if the user passes an option which is not declared in the string 
# d: means -d is legal
#    * furthermore -d takes an additional parameter
#          o obtained via: $OPTARG 
# h means -h is legal 
while getopts ":d:h" opt; do
    case $opt in
        d )  default=$OPTARG ;;
        h )  usage; exit 0;;
        \?)  usage; exit 0;;
    esac
done

shift `expr $OPTIND - 1`

if [ $# -le 1 ]; then
  loc=`dirname $0`
else
  loc=$2
fi

# define PATT using first supplied argument
PATT=$1
shift

# define known possible locations for modulecmd
. ${loc}/setup_modulecmd

# return name of the loaded fortran module matching PATT
if [ -x ${MODULECMD} ]; then

   export MODULECMD
   if [ "x${MODULESHOME}" != "x" ] ; then
     . ${MODULESHOME}/init/sh
   fi
   fortranmodules=`( ${MODULECMD} sh avail 2>&1 ) | ${loc}/filter_module_names ${PATT} -f '(mpi|32|_default|PrgEnv)'`
   loadedfortranmodules=`( ${MODULECMD} sh list 2>&1 ) | ${loc}/filter_module_names ${PATT} -f '(mpi|32|_default|PrgEnv)'`
   #echo "Available Fortran modules: " ${fortranmodules}
   #echo "Loaded Fortran module(s): " ${loadedfortranmodules}
   #echo "Modules to keep loaded: " ${modulestokeeploaded}
   if [ "x${loadedfortranmodules}" != "x" ]; then
      echo "/${loadedfortranmodules}"
   else
     if [ "${default:+true}" = "true" ]; then
        echo "/${default}"
     else
        echo "/${PATT}"
     fi
   fi

else

   if [ "${default:+true}" = "true" ]; then
      echo "/${default}"
   else
      echo "/${PATT}"
   fi

fi
