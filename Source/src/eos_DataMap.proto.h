/*********************************************************************
 *
 * Filetype: (HEADER)
 *
 * Automatically generated by cflow.filter.pl, Wed May 31 16:35:29 2017
 *
 * Copyright -- see file named COPYRIGHTNOTICE
 * 
 *********************************************************************/
#ifndef EOS_DATAMAP_PROTOTYPES

#define EOS_DATAMAP_PROTOTYPES

/*
 * ------------------------------------------------
 * 23 PUBLIC FUNCTION PROTOTYPES FOR eos_DataMap.c
 * ------------------------------------------------
 */
EOS_REAL **_eos_AllocateColdCurveEosDataMap (void *ptr, EOS_INTEGER NR, EOS_INTEGER subTableNum);
eos_Data *_eos_RemapEosDataMap (eos_DataMap * me, EOS_INTEGER tableHandle1, EOS_INTEGER tableHandle2,
                                EOS_INTEGER * optFlags, EOS_BOOLEAN * bval, EOS_REAL * fval,
                                EOS_INTEGER numOptions, EOS_INTEGER alternativeDataType, EOS_INTEGER * errorCode);
void eos_ConstructEosDataMap (eos_DataMap * me);
void eos_CreateTablesEosDataMap (eos_DataMap * me, EOS_INTEGER nTables, EOS_INTEGER tableType[],
                                 EOS_INTEGER matID[], EOS_INTEGER tableHandles[], EOS_INTEGER doCreate,
                                 EOS_INTEGER isPublic, EOS_INTEGER updateOnly,
                                 EOS_INTEGER userDefinedDataFileIndex, EOS_INTEGER * errorCode);
void eos_DestroyEosDataMap (eos_DataMap * me);
void eos_DestroyTablesEosDataMap (eos_DataMap * me, EOS_INTEGER nTables, EOS_INTEGER tableHandles[],
                                  EOS_INTEGER * errorCode);
void eos_ResetExtrapolationBoundsEosDataMap(eos_DataMap *me, EOS_INTEGER th, EOS_BOOLEAN initializing);
void eos_DestroyExtrapolationBoundsEosDataMap(eos_ExtrapolationBoundsEosDataMap *extrapolationBounds);
void eos_AllocateExtrapolationBoundsEosDataMap(eos_DataMap *me, EOS_INTEGER nhandles);
eos_ExtrapolationBoundsEosDataMap* eos_GetExtrapolationBoundsEosDataMap(eos_DataMap *me, EOS_INTEGER th);
void eos_CopyExtrapolationBoundsEosDataMap(eos_DataMap *me, eos_ExtrapolationBoundsEosDataMap *extrapolationBounds,
                                           eos_ExtrapolationBoundsEosDataMap *extrapolationBounds_copy);
eos_Data *eos_GetEosDataEosDataMap (eos_DataMap * me, EOS_INTEGER tableHandle, EOS_INTEGER * dataType,
                                    EOS_INTEGER * errorCode);
EOS_INTEGER eos_GetErrorCodeEosDataMap (eos_DataMap * me, EOS_INTEGER tableHandle);
void eos_GetLoadedBulkDataEosDataMap (eos_DataMap * me, EOS_INTEGER tableHandle, EOS_REAL * zbar, EOS_REAL * abar,
                                      EOS_REAL * dens0, EOS_INTEGER * errorCode);
void eos_GetOptionEosDataMap (eos_DataMap * me, EOS_INTEGER tableHandle, EOS_INTEGER tableOption,
                              eos_OptionValue ** optVal, EOS_INTEGER * errorCode);
void eos_GetPackedTablesEosDataMap (eos_DataMap * me, EOS_INTEGER nTables, EOS_INTEGER tableHandles[],
                                    EOS_CHAR * packedTables, EOS_INTEGER * packedTablesSize,
                                    EOS_INTEGER * errorCode);
void eos_GetTableCmntsEosDataMap (eos_DataMap * me, EOS_INTEGER tableHandle, EOS_CHAR * cmntStr,
                                  EOS_INTEGER * errorCode);
void eos_GetTableInfoEosDataMap (eos_DataMap * me, EOS_INTEGER tableHandle, EOS_INTEGER numInfoItems,
                                 EOS_INTEGER * infoItems, EOS_REAL * infoVals, EOS_INTEGER * errorCode);
void eos_GetTableMetaDataEosDataMap (eos_DataMap * me, EOS_INTEGER tableHandle, EOS_INTEGER infoItem,
                                     EOS_CHAR * infoStr, EOS_INTEGER * errorCode);
void eos_HandleErrorEosDataMap (void *ptr, EOS_INTEGER th, EOS_INTEGER errorCode);
EOS_INTEGER eos_IsHandleValidEosDataMap (eos_DataMap * me, EOS_INTEGER tableHandle);
void eos_LoadTablesEosDataMap (eos_DataMap * me, EOS_INTEGER nTables, EOS_INTEGER tableHandles[],
                               EOS_INTEGER * errorCode);
void eos_ResetOptionEosDataMap (eos_DataMap * me, EOS_INTEGER tableHandle, EOS_INTEGER tableOption,
                                EOS_INTEGER alternativeDataType, EOS_INTEGER * errorCode);
void eos_SetOptionEosDataMap (eos_DataMap * me, EOS_INTEGER tableHandle, EOS_INTEGER tableOption,
                              EOS_REAL tableOptionVal, EOS_INTEGER alternativeDataType, EOS_INTEGER * errorCode);
void eos_SetPackedTablesEosDataMap (eos_DataMap * me, EOS_INTEGER nTables, EOS_INTEGER tableHandles[],
                                    EOS_CHAR * packedTables, EOS_INTEGER * unpackedTablesSize,
                                    EOS_INTEGER * errorCode);

#ifdef _EOS_DATAMAP_INTERNAL_PROTOTYPES

/*
 * ------------------------------------------------
 * 9 PRIVATE FUNCTION PROTOTYPES FOR eos_DataMap.c
 * ------------------------------------------------
 */
void _EOS_CHECK_PACKEDBYTES (EOS_CHAR * errortype, EOS_INTEGER * i, EOS_INTEGER b, EOS_INTEGER tot, EOS_CHAR * s,
                             EOS_INTEGER th, EOS_BOOLEAN storeData);
void _eos_CleanupTablesEosDataMap (eos_DataMap * me, EOS_INTEGER * errorCode);
EOS_INTEGER _eos_LoadEosData (eos_Data * eosData, EOS_INTEGER th);
void _eos_SetOptionsEosDataMap (eos_DataMap * me, EOS_INTEGER tableHandle, EOS_INTEGER * optFlags,
				EOS_BOOLEAN * bval, EOS_REAL * fval, EOS_INTEGER numOptions,
				EOS_INTEGER alternativeDataType, EOS_INTEGER * errorCode);
EOS_INTEGER _eos_setConversionFactors (eos_DataMap * me, EOS_INTEGER th, EOS_REAL convX, EOS_REAL convY,
				       EOS_REAL convF);
void eos_CanBeMadeMonotonicInX (eos_Data * eosData, EOS_INTEGER dataType, EOS_INTEGER * err);
void eos_PrintTableEosDataMap (eos_DataMap * me, EOS_INTEGER tableHandle, EOS_CHAR * fname,
                               EOS_INTEGER * errorCode);
void eos_SetSizeEosDataMap (eos_DataMap * me, EOS_INTEGER nhandles, EOS_INTEGER * errorCode);
void eos_ShouldBeMonotonic (eos_Data * eosData, EOS_INTEGER dataType, EOS_INTEGER * inX1, EOS_INTEGER * inY1,
			    EOS_INTEGER * inX2, EOS_INTEGER * inY2, EOS_INTEGER * dataType1,
			    EOS_INTEGER * dataType2);

#endif /* _EOS_DATAMAP_INTERNAL_PROTOTYPES */

#endif /* EOS_DATAMAP_PROTOTYPES */
