/*********************************************************************
 *
 * Filetype: (HEADER)
 *
 * Automatically generated by cflow.filter.pl, Mon Aug 25 16:13:38 2014
 *
 * Copyright -- see file named COPYRIGHTNOTICE
 * 
 *********************************************************************/
#ifndef EOS_RECORDTYPE1_PROTOTYPES

#define EOS_RECORDTYPE1_PROTOTYPES

/*
 * ---------------------------------------------------
 * 5 PUBLIC FUNCTION PROTOTYPES FOR eos_RecordType1.c
 * ---------------------------------------------------
 */
void _eos_GetDataRecordType1 (eos_RecordType1 * me, EOS_REAL ** R, EOS_REAL ** T, EOS_REAL *** F,
			      EOS_REAL ** coldCurve, EOS_INTEGER subTableNum);
void eos_CleanUpColdCurveRecordType1 (void *ptr, EOS_INTEGER * err);
void eos_ConstructRecordType1 (eos_RecordType1 * me, EOS_INTEGER th, EOS_INTEGER materialID);
void eos_GetSizeRecordType1 (eos_RecordType1 * me, EOS_INTEGER * NR, EOS_INTEGER * NT);
void eos_LoadRecordType1 (void *ptr, EOS_INTEGER th);

#ifdef _EOS_RECORDTYPE1_INTERNAL_PROTOTYPES

/*
 * -----------------------------------------------------
 * 40 PRIVATE FUNCTION PROTOTYPES FOR eos_RecordType1.c
 * -----------------------------------------------------
 */
void _eos_AdjustDataTables (EOS_BOOLEAN userDefinedDataFile, EOS_INTEGER dataFileIndex, EOS_INTEGER nT,
			    EOS_REAL * R, EOS_REAL * T, EOS_REAL ** P, EOS_INTEGER mat, EOS_INTEGER * err,
			    EOS_CHAR ** errMsg);
void _eos_DumpData (EOS_INTEGER call_index, void *ptr, EOS_CHAR * s);
EOS_INTEGER _eos_EvaluateTaylorFor_dataType_DT (eos_Taylor * T, EOS_REAL x, EOS_REAL y, EOS_REAL * f,
						EOS_REAL * dFx, EOS_REAL * dFy);
void _eos_EvaluateTaylorRecordType1 (void *ptr, EOS_INTEGER th, EOS_INTEGER dataType, EOS_INTEGER nXYPairs,
				     EOS_REAL * srchX, EOS_REAL * srchY, EOS_REAL * fVals, EOS_REAL * dFx,
				     EOS_REAL * dFy, EOS_REAL * dFCx, EOS_REAL * dFx0, EOS_REAL * dFy0,
				     EOS_INTEGER * xyBounds, EOS_INTEGER * errorCode);
EOS_INTEGER _eos_EvaluateTransformedTaylorFor_Pt_DT (eos_Taylor * T, EOS_REAL x, EOS_REAL y, EOS_REAL * f,
						     EOS_REAL * dFx, EOS_REAL * dFy);
EOS_INTEGER _eos_EvaluateTransformedTaylorFor_St_DT (eos_Taylor * T, EOS_REAL x, EOS_REAL y, EOS_REAL * f,
						     EOS_REAL * dFx, EOS_REAL * dFy);
EOS_INTEGER _eos_EvaluateTransformedTaylorFor_Ut_DT (eos_Taylor * T, EOS_REAL x, EOS_REAL y, EOS_REAL * f,
						     EOS_REAL * dFx, EOS_REAL * dFy);
void _eos_InterpolateRecordType1 (void *ptr, EOS_INTEGER th, EOS_INTEGER varOrder, EOS_INTEGER dataType,
				  EOS_INTEGER nXYPairs, EOS_REAL * srchX, EOS_REAL * srchY, EOS_REAL * fVals,
				  EOS_REAL * dFx, EOS_REAL * dFy, EOS_REAL * dFCx, EOS_REAL * dFx0,
				  EOS_REAL * dFy0, EOS_INTEGER * xyBounds, EOS_INTEGER * errorCode);
void _eos_SesameInvTRecordType1 (eos_RecordType1 * me, EOS_INTEGER dataType, EOS_INTEGER nXYPairs, EOS_REAL * pres,
				 EOS_REAL * temp, EOS_REAL * fVals, EOS_REAL * dFx, EOS_REAL * dFy,
				 EOS_INTEGER * xyBounds, EOS_INTEGER * errorCode, EOS_CHAR ** errMsg);
void _eos_sesame_isotherm_buildRecordType1 (eos_RecordType1 * me, EOS_REAL temp, EOS_INTEGER * isotherm_nr,
					    EOS_REAL ** isotherm_p, EOS_REAL ** isotherm_e, EOS_REAL ** isotherm_r,
					    EOS_REAL ** isotherm_v, EOS_INTEGER * errorCode, EOS_CHAR ** errMsg);
EOS_INTEGER eos_AnalyticalEOS (eos_RecordType1 * me, const EOS_INTEGER imodel, EOS_REAL ** read_data,
			       EOS_CHAR ** errMsg);
void eos_AreMonotonicRequirementsCompatibleRecordType1 (void *ptr, EOS_INTEGER dataType, EOS_INTEGER inX,
							EOS_INTEGER inY, EOS_BOOLEAN * compatible);
void eos_AreSmoothingRequirementsCompatibleRecordType1 (void *ptr, EOS_INTEGER dataType, EOS_INTEGER makeSmooth,
							EOS_INTEGER makePtSmooth, EOS_BOOLEAN * compatible);
void eos_CheckExtrapRecordType1 (void *ptr, EOS_INTEGER th, EOS_INTEGER dataType, EOS_INTEGER nXYPairs,
				 EOS_REAL * srchX, EOS_REAL * srchY, EOS_INTEGER * xyBounds,
				 EOS_INTEGER * errorCode);
void eos_CheckExtrapRecordType1_using_extrapolationBounds
(void *ptr, EOS_INTEGER th, EOS_INTEGER dataType, EOS_INTEGER nXYPairs, EOS_REAL *srchX,
 EOS_REAL *srchY, EOS_INTEGER *xyBounds, EOS_INTEGER *errorCode);
void eos_CreateRecordType1 (void *ptr, EOS_INTEGER th);
void eos_DestroyRecordType1 (void *ptr);
EOS_INTEGER eos_Entropy (eos_RecordType1 * me, EOS_INTEGER NR, EOS_INTEGER NT, EOS_REAL * U, EOS_REAL * F,
			 EOS_REAL * T, EOS_REAL * R, EOS_REAL * S);
void eos_ExpandGridRecordType1 (void *ptr, EOS_INTEGER * err);
void eos_FixTableRecordType1 (void *ptr, EOS_INTEGER th, EOS_INTEGER * err);
EOS_INTEGER eos_GetAnalyticalEOSFlags (eos_RecordType1 * me, EOS_INTEGER * imodel,
				       eos_OptionValue ** optValForced);
void eos_GetLoadedBulkDataRecordType1 (void *ptr, EOS_REAL * zbar, EOS_REAL * abar, EOS_REAL * dens0,
				       EOS_INTEGER * errorCode);
void eos_GetMonotonicityRecordType1 (void *ptr, EOS_INTEGER dataType, EOS_INTEGER * inX, EOS_INTEGER * inY);
void eos_GetPackedTableRecordType1 (void *ptr, EOS_INTEGER th, EOS_CHAR * packedTable, EOS_INTEGER * err);
void eos_GetPackedTableSizeRecordType1 (void *ptr, EOS_INTEGER th, EOS_INTEGER * packedTableSize,
					EOS_INTEGER * err);
void eos_GetSmoothingRecordType1 (void *ptr, EOS_INTEGER dataType, EOS_INTEGER * isSmooth,
				  EOS_INTEGER * isPtSmooth);
void eos_GetTableMetaDataRecordType1 (void *ptr, EOS_INTEGER infoItem, EOS_CHAR *infoStr, EOS_INTEGER *err);
void eos_GetTableInfoRecordType1 (void *ptr, EOS_INTEGER th, EOS_INTEGER numInfoItems, EOS_INTEGER * infoItems,
				  EOS_REAL * infoVals, EOS_INTEGER * err);
void eos_InvertAtSetupRecordType1 (void *ptr, EOS_INTEGER th, EOS_INTEGER dataType, EOS_INTEGER *errorCode);
void eos_InterpolateRecordType1 (void *ptr, EOS_INTEGER th, EOS_INTEGER dataType, EOS_INTEGER nXYPairs,
				 EOS_REAL * srchX, EOS_REAL * srchY, EOS_REAL * fVals, EOS_REAL * dFx,
				 EOS_REAL * dFy, EOS_INTEGER * xyBounds, EOS_INTEGER * errorCode);
void eos_IsMonotonicRecordType1 (void *ptr, EOS_INTEGER dataType, EOS_BOOLEAN * isMonotonic, EOS_BOOLEAN inX,
				 EOS_BOOLEAN inY, EOS_INTEGER * err);
void eos_MakeMonotonicRecordType1 (void *ptr, EOS_INTEGER th, EOS_INTEGER dataType, EOS_BOOLEAN inX,
				   EOS_BOOLEAN inY, EOS_INTEGER * err);
void eos_MakeSmoothRecordType1 (void *ptr, EOS_INTEGER th, EOS_INTEGER dataType, EOS_BOOLEAN ptSmooth,
				EOS_INTEGER * err);
void eos_PrintRecordType1 (void *ptr, EOS_INTEGER th, EOS_CHAR * fname, EOS_INTEGER append, EOS_INTEGER * err);
EOS_INTEGER eos_SetAdjustedData (eos_RecordType1 * me, EOS_REAL * Fion, EOS_REAL * Ftot, EOS_REAL * Fc,
				 EOS_INTEGER ccLoaded);
void eos_SetFileIndexesRecordType1 (void *ptr, EOS_INTEGER th);
void eos_SetMonotonicityRecordType1 (void *ptr, EOS_INTEGER dataType, EOS_INTEGER inX, EOS_INTEGER inY);
void eos_SetPackedTableRecordType1 (void *ptr, EOS_INTEGER th, EOS_CHAR * packedTable, EOS_INTEGER * err);
void eos_SetSizeRecordType1 (eos_RecordType1 * me, EOS_INTEGER NR, EOS_INTEGER NT, EOS_INTEGER tableNum);
void eos_SetSmoothingRecordType1 (void *ptr, EOS_INTEGER dataType, EOS_INTEGER smooth, EOS_INTEGER pt_smooth);
EOS_INTEGER eos_computeCowanData (eos_RecordType1 * me, eos_RecordType1 * altEosData, EOS_REAL * p, EOS_REAL * e,
				  EOS_REAL * a, EOS_REAL * s);
EOS_INTEGER eos_computeIdealGasData (eos_RecordType1 * me, eos_RecordType1 * altEosData, EOS_REAL * p,
				     EOS_REAL * e, EOS_REAL * a, EOS_REAL * s);
EOS_INTEGER eos_computeNumPropData (eos_RecordType1 * me, eos_RecordType1 * altEosData, EOS_REAL * p, EOS_REAL * e,
				    EOS_REAL * a, EOS_REAL * s);
void _eos_DestroyExtrapolationBounds(eos_RecordType1 *me);
void eos_SetExtrapolationBoundsRecordType1(void *ptr, EOS_INTEGER dataType);
void _eos_resizeRecordType1 (eos_RecordType1 *me, EOS_INTEGER NR, EOS_INTEGER NT, EOS_INTEGER *err);
void _eos_importTableRecordType1 (eos_RecordType1 *me, EOS_INTEGER subTableNum, EOS_INTEGER NR, EOS_INTEGER NT,
				  EOS_REAL *xtbl, EOS_REAL *ytbl, EOS_REAL *ftbl, EOS_REAL *CC);

#endif /* _EOS_RECORDTYPE1_INTERNAL_PROTOTYPES */

#endif /* EOS_RECORDTYPE1_PROTOTYPES */
