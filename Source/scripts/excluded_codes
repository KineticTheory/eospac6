eval '(exit $?0)' && eval 'exec perl -S "$0" ${1+"$@"}' #-*-perl-*-
& eval 'exec perl -S "$0" $argv:q'
        if 0;
##################################################################
#
#  Copyright -- see file named COPYRIGHTNOTICE
#
##################################################################
#
# This script will determine which codes require data that is not
# on the current machine, and then display those codes on STDOUT.
#
# $ARGV[0] shall contain the name of the specific get_sesame_data
# binary to be used. The remaining values in @ARGV are optional
# source file names to search for requirements, which may be
# specified with the following syntax:
#    MATIDS TO TEST     : list one or more required matid;
#                         multiple instances are allowed
#    REQUIRED FILE      : list one required filename per instance;
#                         multiple instances are allowed
#    REQUIRED FILE (AND): same as "REQUIRED FILE:" syntax
#    REQUIRED FILE (OR) : list one filename per instance;
#                         multiple instances are allowed and
#                         at least one file listed is required
#
# If an environment variable name is enclosed in braces like {VAR},
# then the value of the environment variable is substituted within the
# spefified REQUIRED FILE name. This allows a test to be executred within
# dyamically-defined environments such as a GitLab runner. For example:
#   REQUIRED FILE (OR): {CI_PROJECT_DIR}/eospac6-data/data/eos/export-controlled/ieee64/sesame
#
# If no file names are provided on the command line, then all
# files matching glob("test*.[fc]*") are searched.
#
use Data::Dumper;
use Getopt::Long;		# option parser
my $options={};
GetOptions($options,
	   "included",      # reverse the behavior to list included files instead of excluded files
	   "noDefaultData", # suppress search of default SESAME data files found in default location(s) and via SESAMEPATH
	   "verbose+"
	  );

use Cwd;

my $startdir = getcwd;
my $start = time;

# Build matid and/or sesame file dependencies
undef @list;
undef @sesameFilesDirAddons;

$get_sesame_data = shift;

@files = glob "test*.[fc]*";
@files = @ARGV if scalar @ARGV;

print '@files = ', Dumper(\@files) if $options->{"verbose"};

foreach $f (@files) {
  undef @sesameFilesDirConditionalAddons;
  $g=`basename $f`;
  chomp $g;
  print "file: $g\n" if $options->{"verbose"} > 2;
  $t = "";
  undef @s;
  print STDERR __LINE__,' :: $f = ', Dumper($f) if $options->{"verbose"} > 4;
  @a=findMatchingLines('MATIDS\s+TO\s+TEST:', $f);        chomp @a; push(@s, @a);
  print STDERR __LINE__,' :: @a = ', Dumper(\@a) if $options->{"verbose"} > 4;
  @a=findMatchingLines('REQUIRED\s+FILE:', $f);           chomp @a; push(@s, @a);
  print STDERR __LINE__,' :: @a = ', Dumper(\@a) if $options->{"verbose"} > 4;
  @a=findMatchingLines('REQUIRED\s+FILE\s*\(AND\):', $f); chomp @a; push(@s, @a);
  print STDERR __LINE__,' :: @a = ', Dumper(\@a) if $options->{"verbose"} > 4;
  @a=findMatchingLines('REQUIRED\s+FILE\s*\(OR\):', $f);  chomp @a; push(@s, @a);
  print STDERR __LINE__,' :: @a = ', Dumper(\@a) if $options->{"verbose"} > 4;
  print STDERR __LINE__,' :: @s = ', Dumper(\@s) if $options->{"verbose"} > 3;
  print STDERR __LINE__,":: $f: ", '\@s = ', Dumper(\@s) if $options->{"verbose"} == 3;
  foreach $s (@s) {
    $s=~s/.*MATIDS TO TEST:[\s\*\/]*//;
    $s=~s/[\s,\};]+/ /g;
    if ($s =~ /\{([^\}]+)\}/) { # replace environment variable keywords with actual values
      print STDERR __LINE__,":: $f: replace environment variable keywords with actual values\n" if $options->{"verbose"};
      my $n = $1;
      print STDERR __LINE__,":: $f: ", '\$n = ', Dumper($n) if $options->{"verbose"};
      if ($ENV{$n} and -r $ENV{$n}) {
        my $v = $ENV{$n};
        print STDERR __LINE__,":: $f: ", '\$v = ', Dumper($v) if $options->{"verbose"};
        $s =~ s:\{$n\}:$v:g;
        print STDERR __LINE__,":: $f: ", '\$s = ', Dumper($s) if $options->{"verbose"};
      }
    }
    if ($s =~ m|.*REQUIRED\s+FILE:\s*(.+)| or $s =~ m|.*REQUIRED\s+FILE\s+\(AND\):\s*(.+)|) {
      my $n = $1; $n =~ s/^\s+//; $n =~ s/\s+$//;
      $n = "$startdir/$n" if $n !~ m|^/|;
      $s = "FILE=$n";
      print STDERR __LINE__," :: $s\n" if $options->{"verbose"} > 3;
      push @sesameFilesDirAddons, "$n" if not grep {m:$n:} @sesameFilesDirAddons;
    }
    if ($s =~ m|.*REQUIRED\s+FILE\s+\(OR\):\s*(.+)|) {
      my $n = $1; $n =~ s/^\s+//; $n =~ s/\s+$//;
      $n = "$startdir/$n" if $n !~ m|^/|;
      print STDERR __LINE__," :: $s\n" if $options->{"verbose"} > 3;
      push @sesameFilesDirConditionalAddons, "$n" if not grep {m:$n:} @sesameFilesDirConditionalAddons;
    }
    else {
      $s=~s/ +/\t/g if $s !~ /FILE=/;
      chomp $s;
      $t .= "\t$s";
    }
  }
  my $c = "";
  print STDERR '@sesameFilesDirConditionalAddons = ', Dumper(\@sesameFilesDirConditionalAddons)
    if $options->{"verbose"} > 2;
  for $n (@sesameFilesDirConditionalAddons) {
    if (-r "$n") {
      $t .= "\tFILE=$n";
      $c = "$n";
      last;
    }
  }
  $t .= "\tFILE=REQUIRE_ONE(" . join(", ", @sesameFilesDirConditionalAddons) . ")"
    if scalar(@sesameFilesDirConditionalAddons) and "$c" eq "";
  print STDERR "$f: ", '$c = ', Dumper($c) if $options->{"verbose"} > 2;
  print STDERR "$f: ", '@s = ', Dumper(\@s) if $options->{"verbose"} > 2;
  push(@list, "$g$t");
}

print STDERR '@sesameFilesDirAddons = ', Dumper(\@sesameFilesDirAddons) if $options->{"verbose"} > 2;

system("$get_sesame_data id > /dev/null 2>&1");
die "\n$get_sesame_data is not executable\n\n" unless $?==0;

# create $tmpDir/sesameFilesDir.txt from template
$tmpDir = "$startdir/tmpDir.${start}.$$";
system("mkdir $tmpDir > /dev/null 2>&1");
die "ERROR: cannot create directory, '$tmpDir'\n" if not -r "$tmpDir";
$sesameFilesDir_tmp = "$tmpDir/sesameFilesDir.txt";
if (open(IFH, "sesameFilesDir.txt.template")) {
  if (open(OFH, "> $sesameFilesDir_tmp")) {
    my $d = getcwd;
    while ($line = <IFH>) {
      chomp $line;
      $line =~ s:<BASEDIR_PATTERN>/tests:$d: if not m/^[\s]*\#/;
      print OFH "$line\n";
    }
    close OFH;
  }
  else {
    die "ERROR: cannot create file, '$sesameFilesDir_tmp'\n";
  }
  close IFH;
}
else {
  die "ERROR: cannot open file, 'sesameFilesDir.txt.template'\n";
}

$tmp_created=0;
if (-r "$sesameFilesDir_tmp") {
  $tmp_created++;
  chdir("$tmpDir");
  system("cat $startdir/*.sesameFilesDir.txt >> sesameFilesDir.txt") if glob("$startdir/*.sesameFilesDir.txt");
  if ( scalar @sesameFilesDirAddons ) {
    if ( open(FH, ">> sesameFilesDir.txt") ) {
      print FH "\n# Addons\n", join("\n", @sesameFilesDirAddons), "\n";
      close FH;
    }
    else {
      warn "File, $sesameFilesDir_tmp, was not opened to append sesameFilesDirAddons\n";
    }
  }
  system("echo END >> $sesameFilesDir_tmp") if $options->{"noDefaultData"};

  system("echo;echo '---' $sesameFilesDir_tmp '---'; cat $sesameFilesDir_tmp; echo '---'; echo")
    if $options->{"verbose"};

}

$available_matids = `$get_sesame_data id | grep -v 'materials found' 2>&1`;

print "AVAILABLE MATIDS: $available_matids\n"
  if $options->{"verbose"};

@excluded = ();
@included = ();
%excluded = ();
%included = ();

print STDERR "INTERMEDIATE LIST:\n", Dumper(\@list)
  if $options->{"verbose"} > 1;

my $i = 0;
foreach (@list) {
  s/[\n\r]//g;
  ($file, @reqs) = split(/\t+/);
  next if $reqs[0] !~ /\d+/i and $reqs[0] !~ /FILE=/;
  foreach $m (@reqs) {
    if ($m !~ /FILE=REQUIRE_ONE/ and $m !~ /FILE=/ and $available_matids !~ /\b$m\b/) {
      push(@excluded, $file) if not $excluded{$file};
      $excluded{$file}++;
      $i++;
      print STDERR "$i: Excluding $file because it requires $m\n"
	if $options->{"verbose"} and not $options->{"included"};
      last;
    }
    elsif ($m =~ /FILE=/) {
      $m =~ /FILE=(.+)/;
      my $f = $1;
      next if $m !~ /FILE=REQUIRE_ONE/ and -r "$f";
      push(@excluded, $file) if not $excluded{$file};
      $excluded{$file}++;
      $i++;
      $m =~ s/FILE=REQUIRE_ONE/one of /;
      print STDERR "$i: Excluding $file because it requires $m\n"
	if $options->{"verbose"} and not $options->{"included"};
      last;
    }
  }
}

foreach (@list) {
  s/[\n\r]//g;
  ($file, @reqs) = split(/\t+/);
  if (not $excluded{$file}) {
    push(@{$included{$file}}, @reqs);
  }
}
print '%excluded = ', Dumper(\%excluded) if $options->{"verbose"} > 2;
print '%included = ', Dumper(\%included) if $options->{"verbose"} > 2;

if ( $options->{"included"} ) {
  my $i = 0;
  my $tot = scalar keys %included;

  print STDERR "\%included = ", Dumper(\%included)
    if $options->{"verbose"} > 1;

  for my $f (sort keys %included) {
    my $m = join(", ", @{$included{$f}});
    $i++;
    printf STDERR "Including %3d of %d: %s\n", $i, $tot, "$f because I found $m"
      if $options->{"verbose"} and $options->{"included"};
  }
  push(@included, sort keys %included);
  print "@included";
}
else {
  print "@excluded";
}

chdir("$startdir");
if ($tmp_created) {
  system("rm -rf $tmpDir > /dev/null 2>&1");
  die "ERROR: cannot remove directory, $tmpDir\n" if -d $tmpDir;
}

#
# ARGUMENTS:
#   $s : regex pattern
#   $f : filename to search
#
sub findMatchingLines() {

  my $s = shift;
  my $f = shift;
  my @a = ();

  return @a unless open( FH, "<$f" );

  while (<FH>) {
    push @a, $_ if /$s/;
  }

  close FH;

  return @a;
}
