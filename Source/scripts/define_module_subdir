#! /bin/sh
(shopt -s igncr) 2>/dev/null && eval 'shopt -s igncr';#

# $Date: 2016/01/14 18:02:23 $
#
# This script is used to define a subdirectory name specific
# to the currently-loaded fortran compiler module. If modulecmd is not found
# on the current machine, then the first argument is returned with a
# prepended "/".
#

usage ()
{
   cat <<EOF

 Usage:
   define_module_subdir [-h] [-d val] [-l <LOC>] <PATT> [, <PATT> [, ...]]

   -h       Show this help
   -d <VAL> Define the default return string, VAL, in case PATT is not found
   -l <LOC> Optionally specify the location, LOC, of prerequisite script(s).

   <PATT>   Specify one or more of the F90 compiler module name pattern
            {i.e., absoft, pgi, pathscale, intel-f, '^intel(-f)?/', ...}.
            The resulting list of output strings will be concatenated in the order
            that they are found.
            Note that Perl regular expressions are valid, but it is strongly
            recommended that the -d option is used in tandem with any regular
            expression.

EOF
}

if [ $# -le 0 ]; then
  usage
  exit 1
fi

# Parse options -- ":d:h"
# initial colon
#    * means getopts should not produce an internal error message if the user passes an option which is not declared in the string 
# d: means -d is legal
#    * furthermore -d takes an additional parameter
#          o obtained via: $OPTARG 
# h means -h is legal
while getopts "d:hl:" opt; do
    case $opt in
        d )  default=$OPTARG ;;
        h )  usage; exit 0;;
        l )  _LOC=$OPTARG ;;
        \?)  usage; exit 0;;
    esac
done

shift `expr $OPTIND - 1`

if [ -z "${_LOC}" ]; then
  loc=`dirname $0`
else
  loc=${_LOC}
fi

while [ $# -ge 1 ]; do

  # define PATT using first supplied argument
  PATT=$1
  shift

  # define known possible locations for modulecmd
  . ${loc}/setup_modulecmd

  # return name of the loaded fortran module matching PATT
  if [ -x ${MODULECMD} ]; then

     export MODULECMD
     if [ "x${MODULESHOME}" != "x" ] ; then
       . ${MODULESHOME}/init/sh
     fi
     fortranmodules=`( ${MODULECMD} sh avail 2>&1 ) | ${loc}/filter_module_names ${PATT} -f '(mpi|32|_default|PrgEnv)'`
     loadedfortranmodules=`( ${MODULECMD} sh list 2>&1 ) | ${loc}/filter_module_names ${PATT} -f '(mpi|32|_default|PrgEnv)'`
     #echo "Available Fortran modules: " ${fortranmodules}
     #echo "Loaded Fortran module(s): " ${loadedfortranmodules}
     #echo "Modules to keep loaded: " ${modulestokeeploaded}
     if [ "x${loadedfortranmodules}" != "x" ]; then
        printf "%s" "/${loadedfortranmodules}"
     else
       if [ "${default:+true}" = "true" ]; then
          printf "%s" "/${default}"
       else
          printf "%s" "/${PATT}"
       fi
     fi

  else

     if [ "${default:+true}" = "true" ]; then
        printf "%s" "/${default}"
     else
        printf "%s" "/${PATT}"
     fi

  fi

done
