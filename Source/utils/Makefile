##################################################################
#  
#  Copyright -- see file named COPYRIGHTNOTICE
#  
##################################################################
### Utils Makefile.                                            ###
##################################################################
SHELL = /bin/sh

include ../Makefile.compile_opts


##################################################################
# define the floating point number comparison (FCMP),
# and its default options, $(FCMP_DEFAULT)
FCMP = $(BASEDIR)/scripts/fcmp
FCMP_DEFAULT = -d -i -e fcmp_ignore

# define the acceptable relative difference for regression testing using $(FCMP)
ACCEPTANCE_REL_DIFF = 1.0e-12

# define the file containing alternative options for $(FCMP)
FCMP_OPT = ./tests/fcmp.opt

##################################################################

NORUN     = FALSE
NODISPLAY = TRUE
EXEDIR    = $(BINDIR)
TESTEXEDIR = $(BASEDIR)/utils/tests/$(ARCH)
REGRESSION_DATA_DIR = $(BASEDIR)/utils/tests/data/baseline
README  = $(sort $(EXE:%=$(BASEDIR)/utils/%.readme))

##################################################################
### Create dependency lists                                    ###
##################################################################
DEPDIR = $(BASEDIR)/utils/.depends
df = $(DEPDIR)/$(*F)
MAKEDEPEND = $(BASEDIR)/scripts/make_depends -d $(DEPDIR) -I $(SRCDIR) -I $(SESIOINC) $<

##################################################################
### Target definitions                                         ###
##################################################################
all: MAKEDIRS $(LIBRARY_AR) LISTOBJS $(GET_MOD_FILES) $(README)
	$(MAKE) $(OBJS)

$(BASEDIR)/utils/%.readme : %.c
	@printf "%s %s" '*** Create' $@
	@$(BASEDIR)/scripts/make_readme $< > $(EXEDIR)/`basename $@`
	@echo ' ... done'
	@(f=$(EXEDIR)/`basename $@`; \
          hnew=$(BASEDIR)/utils/$*_help.new.h; \
          h=$(BASEDIR)/utils/$*_help.h; \
          echo '/*********************************************************************' > $$hnew; \
          echo ' * Header file auto-generated by Makefile' >> $$hnew; \
          echo ' *********************************************************************/' >> $$hnew; \
          echo 'static char *help_str =' >> $$hnew; \
          sed -e 's/"/\\"/g' $$f | sed -e 's/\(.*\)/  "\1\\n"/' >> $$hnew; \
          echo '  ;' >> $$hnew; \
          diff $$h $$hnew; \
          if [ $$? -ne 0 ]; then \
            printf "%s %s" '*** Create' $$h; \
            mv $$hnew $$h; \
            echo ' ... done'; \
          else \
            rm $$hnew; \
          fi; \
         )
$(OBJDIR)/%.o : %.c
	$(MAKEDEPEND)
	${CC} $(C_ADDRESS_FLAG) ${CPPFLAGS} ${CFLAGS} $(MORE_COMPILE_OPTS) -I$(SRCDIR) -c $< -o $@
	$(PURIFY) $(CC) $(C_ADDRESS_FLAG) $(LDFLAGS) $(MORE_LD_OPTS) -o $(EXEDIR)/$* $@ $(LIBS)  
	@-rm $@

$(OBJDIR)/%.o : %.cpp
	$(MAKEDEPEND)
	${CXX} $(C_ADDRESS_FLAG) ${CPPFLAGS} ${CXXFLAGS} $(MORE_COMPILE_OPTS) -I$(SRCDIR) -c $< -o $@
	$(PURIFY) $(CXX) $(C_ADDRESS_FLAG) $(LDFLAGS) $(MORE_LD_OPTS) -o $(EXEDIR)/$* $(OBJDIR)/$(TEST_FUNCTIONS_OBJ) $@ $(LIBS) 
	@-rm $@

$(OBJDIR)/%.o : %.f
	$(MAKEDEPEND)
	${F77} $(F_ADDRESS_FLAG) ${FFLAGS} $(MORE_COMPILE_OPTS) -I$(SRCDIR) -c $< -o $@
	$(PURIFY) $(F77) $(F_ADDRESS_FLAG) $(LDFLAGS) $(MORE_LD_OPTS) -o $(EXEDIR)/$* $@ $(OBJDIR)/$(TEST_FUNCTIONS_OBJ)  $(LIBS) 
	@-rm $@

$(OBJDIR)/%.o : %.f90
	$(MAKEDEPEND)
	@(d=`pwd`; \
         cd $(OBJDIR); \
         echo $(F90) $(F_ADDRESS_FLAG) ${F90FLAGS} $(MORE_COMPILE_OPTS) -I$(SRCDIR) -c $$d/$< -o $@; \
         $(F90) $(F_ADDRESS_FLAG) ${F90FLAGS} $(MORE_COMPILE_OPTS) -c $$d/$< -o $@; \
        )
	$(PURIFY) $(F90) $(F_ADDRESS_FLAG) $(LDFLAGS) $(MORE_LD_OPTS) -o $(EXEDIR)/$* $@ $(PROFILE) $(OBJDIR)/$(TEST_FUNCTIONS_OBJ) $(LIBS) $(F90_LIBS) 
	@-rm $@

JUNKFILE = junk.stdout
COMPILER_INFO_FILE = $(LIBDIR)/compiler_info.txt
PASSFAILOUTPUTFILE = $(TESTEXEDIR)/pass_fail_output_file.txt
PASSFAILOUTPUTHTML = $(TESTEXEDIR)/pass_fail_output_file.html
PASSFAILOUTPUTXML  = $(TESTEXEDIR)/pass_fail_output_file.xml
MAKE_HTML_OPT="--totaltests=$(words $(EXE) $(EXE))"

ifdef NODEP
$(EXE): MAKEDIRS
else
$(EXE): MAKEDIRS $(LIBRARY_AR) $(GET_MOD_FILES) $(README)
endif
	@echo ' '
	-rm -f $(OBJDIR)/$@.o \
               $(EXEDIR)/$(@) \
               $(EXEDIR)/$(@).exe \
               $(TESTEXEDIR)/$@.stdout
	@echo '**************************************************************'
	@echo '*** Creating ' $(OBJDIR)/$@.o
	@echo '**************************************************************'
	$(MAKE) $(OBJDIR)/$@.o

LISTOBJS:
	@echo ' '
	@echo '***' Object files: $(OBJS)
	@echo '***' Executable files: $(EXE)
	@echo ' '

$(addprefix $(EXEDIR)/,$(EXE)):
	@-(dir=`dirname $@`; \
           exe=`basename $@`; \
           popdir=`pwd`; \
           echo dir=$${dir}; echo exe=$${exe}; echo popdir=$${popdir}; \
           echo ' '; \
           if [ -f "$${dir}/$${exe}" -o -f "$${dir}/$${exe}.exe" ]; then \
              for t in tests/test_$${exe}*.pl; do \
                t_base=`basename "$${t}"`; \
                if [ ! -d "$(TESTEXEDIR)/$${t_base}.workdir" ]; then \
                  mkdir -p "$(TESTEXEDIR)/$${t_base}.workdir"; \
                fi; \
                sed -e 's:<BASEDIR_PATTERN>:$(BASEDIR):' $(BASEDIR)/tests/sesameFilesDir.txt.template > "$(TESTEXEDIR)/$${t_base}.workdir/sesameFilesDir.txt" ; \
                cd "$(TESTEXEDIR)/$${t_base}.workdir"; \
                printf "*** Execute %s\n" $${t_base}; \
                perl "$${popdir}/$${t}" -e "$${dir}/$${exe}" $(BASEDIR)/tests/data > ../$${t_base}.stdout 2>&1; \
                cd "$${popdir}"; \
                rm -f -r "$(TESTEXEDIR)/$${t_base}.workdir"; \
              done; \
           else \
              printf "*** Execute %s ... missing\n" "$${dir}/$${exe}"; \
           fi; \
           echo ' '; \
          )

check test: all
	@(echo  ' '; \
          echo '**************************************************************'; \
          echo 'Execute all tests:'; \
          echo '**************************************************************'; \
          echo '*** perl --version'; \
          perl --version; \
          if [ $$? -eq 0 ]; then \
            set -x; \
            $(MAKE) $(addprefix $(EXEDIR)/,$(EXE)); \
          else \
            echo Perl unavailable ... run no tests; \
          fi; \
        )
	$(MAKE) -j1 MAKE_HTML_OPT=$(MAKE_HTML_OPT) compare;
#	@(echo '--- BEGIN XML ($(MAKEFILE_LIST)) ---'; cat $(PASSFAILOUTPUTXML); echo '---- END XML ($(MAKEFILE_LIST)) ----';)

compare:
	@( $(MAKE) COMPILER_INFO 2>&1 ) | tee $(COMPILER_INFO_FILE)
	@-(echo ' '; \
           echo '********************************************************************'; \
           echo '***' Compare $(ARCH) utils test results to regression baseline results; \
           echo '********************************************************************'; \
           cntr=0 ; \
           cntr_ignored=0 ; \
           cntr_excluded=0 ; \
           totcntr=0 ; \
           date > $(PASSFAILOUTPUTFILE); \
           echo EOSPAC $(CVS_BASE_TAG_NAME) >> $(PASSFAILOUTPUTFILE); \
           uname -a >> $(PASSFAILOUTPUTFILE); \
           for ext in stdout; do \
             accept=$(ACCEPTANCE_REL_DIFF); \
             if [ "$$ext" != "stdout" ]; then \
               accept=1.0e-7; \
             fi; \
             echo ' ' | tee -a $(PASSFAILOUTPUTFILE); \
             for exe0 in tests/test_$${exe}*.pl; do \
               exe=`basename $${exe0}`; \
               fcmp_status=0; \
               totcntr=`expr $$totcntr + 1` ; \
               if [ -s $(REGRESSION_DATA_DIR)/$$exe.$$ext ]; then \
                 if [ -s tests/$(ARCH)/$$exe.$$ext ]; then \
                   fcmp_cmd="$(FCMP) -r $$accept $(FCMP_DEFAULT) tests/$(ARCH)/$$exe.$$ext $(REGRESSION_DATA_DIR)/$$exe.$$ext"; \
                   opts_str="  (fcmp options: -r $$accept $(FCMP_DEFAULT))"; \
                   if [ -s $(FCMP_OPT) ]; then \
                     alt_opts=""; \
                     alt_opts_str=""; \
                     fcmp_opt_list=""; \
                     if grep $$exe.$$ext $(FCMP_OPT) > /dev/null 2>&1; then \
                       alt_opts="-k $$exe.$$ext -o $(FCMP_OPT)"; \
                       opts_str="  (fcmp options: `$(FCMP) -p -k $$exe.$$ext -o $(FCMP_OPT)`)"; \
                       fcmp_cmd="$(FCMP) $$alt_opts tests/$(ARCH)/$$exe.$$ext $(REGRESSION_DATA_DIR)/$$exe.$$ext"; \
                       fcmp_opt_list=`$(FCMP) $$alt_opts -p tests/$(ARCH)/$$exe.$$ext $(REGRESSION_DATA_DIR)/$$exe.$$ext`; \
                     fi; \
                   fi; \
                   rm -f $(JUNKFILE).$$exe.$$ext; \
                   if diff -wib tests/$(ARCH)/$$exe.$$ext $(REGRESSION_DATA_DIR)/$$exe.$$ext > $(JUNKFILE).$$exe.$$ext 2>&1 \
                      && perl -e 'exit ($$ARGV[0] =~ /Q/)?0:1' "'$$fcmp_opt_list'"; \
                   then \
                     echo "PASSED:   $$exe.$$ext $$opts_str" | tee -a $(PASSFAILOUTPUTFILE); \
                   else \
                     $$fcmp_cmd > $(JUNKFILE).$$exe.$$ext 2>&1; \
                     fcmp_status=$$?; \
                     if [ $$fcmp_status -lt 255 -a $$fcmp_status -ne 0 ]; then \
                       echo "FAILED:   $$exe.$$ext $$opts_str" `grep 'sizes are different' $(JUNKFILE).$$exe.$$ext` | tee -a $(PASSFAILOUTPUTFILE); \
                       cntr=`expr $$cntr + 1` ; \
                     elif [ $$fcmp_status -eq 0 ]; then \
                       echo "PASSED:   $$exe.$$ext $$opts_str" | tee -a $(PASSFAILOUTPUTFILE); \
                     else \
                       echo "excluded: $$exe.$$ext from comparison per options in " $(FCMP_OPT) A.$$fcmp_status | tee -a $(PASSFAILOUTPUTFILE); \
                       cntr_excluded=`expr $$cntr_excluded + 1`; \
                     fi; \
                   fi; \
                   rm -f $(JUNKFILE).$$exe.$$ext; \
                 else \
                   if grep $$exe.$$ext $(FCMP_OPT) > /dev/null 2>&1; then \
                     alt_opts="-k $$exe.$$ext"; \
                     fcmp_cmd="$(FCMP) $$alt_opts tests/$(ARCH)/$$exe.$$ext $(REGRESSION_DATA_DIR)/$$exe.$$ext"; \
                     $$fcmp_cmd > $(JUNKFILE).$$exe.$$ext 2>&1; \
                     fcmp_status=$$?; \
                     rm -f $(JUNKFILE).$$exe.$$ext; \
                   fi; \
                   if [ $$fcmp_status -lt 255 ]; then \
                     echo "FAILED:   $$exe.$$ext", $$fcmp_status tests/$(ARCH)/$$exe.$$ext, File is missing or empty | tee -a $(PASSFAILOUTPUTFILE); \
                     cntr=`expr $$cntr + 1`; \
                   else \
                     echo "excluded: $$exe.$$ext from comparison per options in" $(FCMP_OPT) B.$$fcmp_status | tee -a $(PASSFAILOUTPUTFILE); \
                     cntr_excluded=`expr $$cntr_excluded + 1`; \
                   fi; \
                 fi; \
               else \
                 if grep $$exe.$$ext $(FCMP_OPT) > /dev/null 2>&1; then \
                   alt_opts="-k $$exe.$$ext"; \
                   fcmp_cmd="$(FCMP) $$alt_opts tests/$(ARCH)/$$exe.$$ext $(REGRESSION_DATA_DIR)/$$exe.$$ext"; \
                   $$fcmp_cmd > $(JUNKFILE).$$exe.$$ext 2>&1; \
                   fcmp_status=$$?; \
                   rm -f $(JUNKFILE).$$exe.$$ext; \
                 fi; \
                 if [ $$fcmp_status -lt 255 ]; then \
                   echo "WARNING:  $$exe.$$ext"  $(REGRESSION_DATA_DIR)/$$exe.$$ext, File is missing or empty | tee -a $(PASSFAILOUTPUTFILE); \
                   cntr_ignored=`expr $$cntr_ignored + 1`; \
                 else \
                   echo "excluded: $$exe.$$ext from comparison per options in" $(FCMP_OPT) C.$$fcmp_status | tee -a $(PASSFAILOUTPUTFILE); \
                   cntr_excluded=`expr $$cntr_excluded + 1`; \
                 fi; \
               fi; \
             done; \
           done; \
           cntr=`grep -c FAILED $(PASSFAILOUTPUTFILE)`; \
           tmpcntr=`grep -c PASSED $(PASSFAILOUTPUTFILE)`; \
           cntr_ignored=`grep -c WARNING $(PASSFAILOUTPUTFILE)`; \
           totcntr=`expr $$tmpcntr + $$cntr + $$cntr_ignored + $$cntr_excluded`; \
           echo ' '; \
           if [ $$cntr -ne 0 ]; then \
             echo "   *** $$cntr of $$totcntr TESTS FAILED!!! ***"; \
           fi; \
           if [ $$tmpcntr -ne 0 ]; then \
             echo "   *** $$tmpcntr of $$totcntr TESTS PASSED!!! ***"; \
           fi; \
           if [ $$cntr_ignored -ne 0 ]; then \
             echo "    WARNING: $$cntr_ignored output comparisons were ignored because baseline output is missing."; \
             echo "       NOTE: $$cntr_excluded output comparisons were purposely excluded according to fcmp options in fcmp.opt."; \
           fi; \
           echo 'END_PASSFAILOUTPUT' >> $(PASSFAILOUTPUTFILE); \
           echo ' ';)

make_html:
	@$(BASEDIR)/scripts/make_html $(MAKE_HTML_OPT) --verbose $(PASSFAILOUTPUTFILE) > $(PASSFAILOUTPUTHTML)

make_xml:
	@$(BASEDIR)/scripts/make_html $(MAKE_HTML_OPT) --verbose --xml $(PASSFAILOUTPUTFILE) --compiler_info_file $(COMPILER_INFO_FILE) > $(PASSFAILOUTPUTXML)

send_report: make_html make_xml
	@-(my_system_name=`uname -n`; \
           $(BASEDIR)/scripts/send_html_mail -p $(PASSFAILOUTPUTFILE) \
                 -s "EOSPAC 6 Testing Status report ($$my_system_name: $(ARCH))" $(PASSFAILOUTPUTHTML); \
         )

$(GET_MOD_FILES):
# this is used to put all *.mod or *.MOD into CWD -- Compaq Dev Studio f90 requires this
	@-cp -f $(INCDIR)/*.mod $(INCDIR)/*.MOD .

ARCHROOT = $(subst $(ALT_SUBDIR),,$(EXEDIR))
MAKEDIRS:
	@mkdir -p $(OBJDIR)
	mkdir -p $(EXEDIR)
	@-touch $(ARCHROOT)/.distclean

$(LIBRARY_AR):
	@$(MAKE) -C $(BASEDIR)/src

version:
ifeq (0,${MAKELEVEL})
	@$(MAKE) -C $(BASEDIR)/src version
endif

install: clean all
ifeq (0,${MAKELEVEL})
	@$(MAKE) -C $(BASEDIR)/Examples install
endif

list_my_installed_files:
ifeq (0,${MAKELEVEL})
	@$(MAKE) -C $(BASEDIR)/Examples list_my_installed_files
endif

list_installed_files:
ifeq (0,${MAKELEVEL})
	@$(MAKE) -C $(BASEDIR)/Examples list_installed_files
endif

uninstall:
ifeq (0,${MAKELEVEL})
	@$(MAKE) -C $(BASEDIR)/Examples uninstall
endif

TAGS: $(HEADERS) $(SRCS)
	etags $(HEADERS) $(SRCS)

clean:
ifeq (0,${MAKELEVEL})
	@$(MAKE) -C $(BASEDIR)/Examples clean
else
	-rm -fr $(EXAMPLEDIR) $(DEPDIR) $(EXEDIR) $(LIBDIR) \
                `find . -name 'core*' -o -name '*.stackdump' -o -name '*.lst'` $(BUILD_LOG)
	@$(MAKE) -C $(BASEDIR)/src clean
endif

cleanarch:
ifeq (0,${MAKELEVEL})
	@$(MAKE) -C $(BASEDIR) cleanarch
endif

ifeq (0,${MAKELEVEL})
distclean:
	@$(MAKE) -C $(BASEDIR)/Examples distclean

distcleanfast:
	@$(MAKE) -C $(BASEDIR)/Examples distcleanfast
else

DISTCLEAN_DIRS = $(patsubst %/.distclean,%,$(wildcard $(BASEDIR)/utils/*/.distclean))
DISTCLEAN_SUBDIRS = $(notdir $(DISTCLEAN_DIRS))

distclean: $(addprefix distclean_,$(DISTCLEAN_SUBDIRS))
	-rm -fr $(INCDIR) $(DEPDIR) $(OBJDIR) $(LIBDIR) \
                $(CPPDIR) $(MANGLED_SRCS) $(BUILD_LOG) \
                `find . -name '$(JUNKFILE)*' -o -name 'core*' -o -name '*.stackdump' -o -name '*.MOD' -o -name '*.mod' -o -name '*.lst'`

distclean_%:
	@(loc=`pwd`; \
          set -x; \
          rm -rf $$loc/$*; \
         )
endif

mostlyclean:
	@(loc=`pwd`; \
          for f in `find $$loc -name .distclean`; do \
            d=`dirname $$f`; \
            if [ -d $$d ]; then \
              printf "Removing %s" $$d; \
              rm -r -f $$d; \
              if [ $$? -eq 0 ]; then \
                echo ' ... done'; \
              fi; \
            fi; \
          done; \
         )
	-rm -fr $(DEPDIR) $(BUILD_LOG) \
                `find . -name 'core*'` `find . -name '*.stackdump'` \
                `find . -name '*.MOD'` `find . -name '*.mod'`

list_tests:
	@-(printf "\nThe available utility Make targets are:\n"; \
           $(BASEDIR)/scripts/fmt_list $(EXE); \
           printf "\n";)

COMPILER_INFO:
	@echo '********************************************************'
	@echo '--- C ---'
	-$(CC_VERSION)
	@echo '--- C++ ---'
	-$(CXX_VERSION)
	@echo '--- F77 ---'
	-$(F77_VERSION)
	@echo '--- F90 ---'
	-$(F90_VERSION)
	@echo ' '
	@echo '********************************************************'

.PHONY: all LISTOBJS check test MAKEDIRS install TAGS clean cleanarch distclean mostlyclean \
        list_installed_files list_my_installed_files list_tests send_report \
        make_html make_xml $(addprefix $(EXEDIR)/,$(EXE))
